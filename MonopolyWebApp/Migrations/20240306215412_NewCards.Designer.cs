// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonopolyWebApp.Database;

#nullable disable

namespace MonopolyWebApp.Migrations
{
    [DbContext(typeof(MonopolyDBContext))]
    [Migration("20240306215412_NewCards")]
    partial class NewCards
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MonopolyWebApp.Data.Rent", b =>
                {
                    b.Property<int>("RentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentID"));

                    b.Property<int>("RentBase")
                        .HasColumnType("int");

                    b.Property<int>("RentFour")
                        .HasColumnType("int");

                    b.Property<int>("RentHotel")
                        .HasColumnType("int");

                    b.Property<int>("RentOne")
                        .HasColumnType("int");

                    b.Property<int>("RentThree")
                        .HasColumnType("int");

                    b.Property<int>("RentTwo")
                        .HasColumnType("int");

                    b.HasKey("RentID");

                    b.ToTable("Rent");
                });

            modelBuilder.Entity("MonopolyWebApp.Data.Space", b =>
                {
                    b.Property<int>("SpaceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpaceID"));

                    b.Property<int>("BuildingAmount")
                        .HasColumnType("int");

                    b.Property<bool>("HasProp")
                        .HasColumnType("bit");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("SpaceID");

                    b.HasIndex("PropertyId");

                    b.ToTable("Spaces");
                });

            modelBuilder.Entity("MonopolyWebApp.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChanceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("CardId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            CardId = 1,
                            Action = "advanceGo",
                            ChanceId = 0,
                            Description = "Advance to Go (collect 200$)",
                            Price = 0
                        },
                        new
                        {
                            CardId = 2,
                            Action = "advanceProp17",
                            ChanceId = 0,
                            Description = "Advance to Trafalgar Square(prop17). If you pass Go, collect $200",
                            Price = 0
                        },
                        new
                        {
                            CardId = 3,
                            Action = "advanceProp7",
                            ChanceId = 0,
                            Description = "Advance to PallMall(prop7) If you pass Go, collect $200",
                            Price = 0
                        },
                        new
                        {
                            CardId = 4,
                            Action = "advanceUtility",
                            ChanceId = 0,
                            Description = "Advance to nearest Utility",
                            Price = 0
                        },
                        new
                        {
                            CardId = 5,
                            Action = "advanceRailroad",
                            ChanceId = 0,
                            Description = "Advance to nearest Railroad",
                            Price = 0
                        },
                        new
                        {
                            CardId = 6,
                            Action = "advanceRailroad",
                            ChanceId = 0,
                            Description = "Advance to nearest Railroad",
                            Price = 0
                        },
                        new
                        {
                            CardId = 7,
                            Action = "bankDividend",
                            ChanceId = 0,
                            Description = "Bank pays you dividend of $50",
                            Price = 0
                        },
                        new
                        {
                            CardId = 8,
                            Action = "jailFree",
                            ChanceId = 0,
                            Description = "Get Out of Jail Free!",
                            Price = 0
                        },
                        new
                        {
                            CardId = 9,
                            Action = "goBack3",
                            ChanceId = 0,
                            Description = "Go back 3 spaces",
                            Price = 0
                        },
                        new
                        {
                            CardId = 10,
                            Action = "jail",
                            ChanceId = 0,
                            Description = "Go directly to Jail. Do not pass Go, do not collect $200",
                            Price = 0
                        },
                        new
                        {
                            CardId = 11,
                            Action = "generalRepairs",
                            ChanceId = 0,
                            Description = "Make general repairs on all your property. For each house, pay $25. For each hotel, pay $100.",
                            Price = 0
                        },
                        new
                        {
                            CardId = 12,
                            Action = "poorTax",
                            ChanceId = 0,
                            Description = "Pay Poor Tax of $15",
                            Price = 0
                        },
                        new
                        {
                            CardId = 13,
                            Action = "advanceProp3",
                            ChanceId = 0,
                            Description = "Advance to King Cross St(prop3). If you pass Go, collect $200",
                            Price = 0
                        },
                        new
                        {
                            CardId = 14,
                            Action = "advanceProp28",
                            ChanceId = 0,
                            Description = "Advance to Mayfair(prop28). If you pass Go, collect $200",
                            Price = 0
                        },
                        new
                        {
                            CardId = 15,
                            Action = "chairman",
                            ChanceId = 0,
                            Description = "You have been elected Chairman of the Board. Pay each player $50",
                            Price = 0
                        },
                        new
                        {
                            CardId = 16,
                            Action = "matures",
                            ChanceId = 0,
                            Description = "Your building and loan matures. Collect $150",
                            Price = 0
                        });
                });

            modelBuilder.Entity("MonopolyWebApp.Models.Property", b =>
                {
                    b.Property<int>("PropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyID"));

                    b.Property<int>("BuildingCost")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMortagaged")
                        .HasColumnType("bit");

                    b.Property<int>("MortageValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("RentID")
                        .HasColumnType("int");

                    b.HasKey("PropertyID");

                    b.HasIndex("RentID");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("MonopolyWebApp.Data.Space", b =>
                {
                    b.HasOne("MonopolyWebApp.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MonopolyWebApp.Models.Property", b =>
                {
                    b.HasOne("MonopolyWebApp.Data.Rent", "Rent")
                        .WithMany()
                        .HasForeignKey("RentID");

                    b.Navigation("Rent");
                });
#pragma warning restore 612, 618
        }
    }
}
